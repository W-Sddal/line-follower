#define irleft 10
#define irright A7
#define ltrig 12
#define lecho 11
#define rtrig A0
#define recho A1
#define mtrig 2
#define mecho 4
#define in1 8
#define in2 6
#define in3 9
#define in4 7
#define enA 5
#define enB 3
#define out5 A6
#define out4 A5
#define out3 A4
#define out2 A3
#define out1 A2

int ir1,ir2,ir3,ir4,ir5;      // Variable to store data from IR sensors

char data='x';
bool state=0;
int SPEED=150;

int black=1;                  // Black line means Ouput of sensor = 0
int white=0;                  // White line means Ouput of sensor = 1
bool line=black; 

int normal_speed=90;
int allowed_max_speed=130;

int mlSpeed = 0;
int mrSpeed = 0;
int position = 0;
int error = 0;
int lasterror = 0;
int goal=2000;

// PID algo
int P, D, I ,PIDvalue;
float Kp = 0.031;
float Kd = 0.093;
float Ki = 0.001 ;

int M1 = normal_speed+9;  //base motor speeds
int M2 = normal_speed;

int m1Speed = 0;
int m2Speed = 0;

float ultrasonicm();
void speed();
void lfr();
void findpostion();
void move(int lspeed,int rspeed);
void rc();

void setup() {
  pinMode(out1,INPUT);              // Ouput from IR sensor
  pinMode(out2,INPUT);              // Ouput from IR sensor
  pinMode(out3,INPUT);              // Ouput from IR sensor
  pinMode(out4,INPUT);              // Ouput from IR sensor
  pinMode(out5,INPUT);              // Ouput from IR sensor

  pinMode(in1, OUTPUT);             // CounterClockwise Motor A
  pinMode(in2, OUTPUT);             // Clockwise Motor A
  pinMode(in3, OUTPUT);             // CounterClockwise Motor B
  pinMode(in4, OUTPUT);             // Clockwise Motor B
  pinMode(enA, OUTPUT);             // Enable Ouputs for Motor A (PWM)
  pinMode(enB, OUTPUT);             // Enable Ouputs for Motor B (PWM)
  Serial.begin(9600);               // initialize serial monitor
  
  delay(10);
}
void loop() {
  if (Serial.available()){
    data=Serial.read();
  }
  if (data=='x')
    state=1;                        // RC
  else if (data=='X')
    state=0;                        // LFR
  if (state==1){ 
    rc();
  }
  else{
  if(ultrasonicm() > 3){
    lfr();
  }
    else{
     move(0, 120); 
    }
  }
}
void lfr(){
    findpostion();
  // Serial.print(" | position");
  // Serial.print(position);

  error = position - goal;
  P = error;
  I = I + error;
  D = error-lasterror;
  PIDvalue = Kp*P + Kd*D + Ki*I;
  // Serial.print(" | PIDvalue ");
  // Serial.print(PIDvalue);
  lasterror = error;
  mlSpeed = M1 - PIDvalue;  // M1 and M2 are base motor speeds.
  mrSpeed = M2 + PIDvalue;
  // Serial.print(" | M_R ");
  // Serial.print(mrSpeed);
  // Serial.print(" | M_L ");
  // Serial.println(mlSpeed);
  if (mlSpeed < 0)  //keep Speed to 0 or above
    mlSpeed = 0;
  if (mrSpeed < 0)
    mrSpeed = 0;
  if (mlSpeed > allowed_max_speed)  //maximum allowed value
    mlSpeed = allowed_max_speed;
  if (mrSpeed > allowed_max_speed)  //maximum allowed value
    mrSpeed = allowed_max_speed;
  move(mlSpeed, mrSpeed);
}
void findpostion(){
  ir1=analogRead(out1);    //most left
  ir2=analogRead(out2);    //most mid left
  ir3=analogRead(out3);    //most mid
  ir4=analogRead(out4);    //most mid right
  ir5=analogRead(out5);    //most right
if(ir1>200)
  ir1=white;
else
  ir1=black;
if(ir2>200)
  ir2=white;
else
  ir2=black;
if(ir3>200)
  ir3=white;
else
  ir3=black;
if(ir4>200)
  ir4=white;
else
  ir4=black;
if(ir5>200)
  ir5=white;
else
  ir5=black;
// Print IR sensor values of Serial Monitor :-
  // Serial.print("IR 1 = ");
  // Serial.print(ir1);
  // Serial.print(" | IR 2 = ");
  // Serial.print(ir2);
  // Serial.print(" | IR 3 = ");
  // Serial.print(ir3);
  // Serial.print(" | IR 4 = ");
  // Serial.print(ir4);
  // Serial.print(" | IR 5 = ");
  // Serial.print(ir5);
  position = (0*ir1 + 1000*ir2 + 2000*ir3 + 3000*ir4 + 4000*ir5) / (ir1 + ir2 + ir3 + ir4 + ir5);
}
void move(int L, int R) {
  analogWrite(enA,L);
  analogWrite(enB,R); 
  digitalWrite(in1, HIGH);
  digitalWrite(in3, HIGH);
  digitalWrite(in2, LOW);
  digitalWrite(in4, LOW);  
}
void rc(){
switch (data) {
  case 'F':
    forward();
    break;
  case 'B':
    backward();
  break;
  case 'L':
    left();
  break;
  case 'G':
    forward_left();
  break;
  case 'I':
    forward_right();
  break;
  case 'H':
    backward_left();
  break;
  case 'J':
    backward_right();
  break;
  case 'R':
    right();
  break;
  case 'S':
    Stop();
  }
  speed();
  analogWrite(enA,SPEED);
  analogWrite(enB,SPEED);
}
void forward()
{
  digitalWrite(in1, HIGH);
  digitalWrite(in3, HIGH);
  digitalWrite(in2, LOW);
  digitalWrite(in4, LOW);  
  
}
void backward()
{
  digitalWrite(in2, HIGH);
  digitalWrite(in4, HIGH);
  digitalWrite(in1, LOW);
  digitalWrite(in3, LOW); 
  
}
void left()
{
  digitalWrite(in1, HIGH);
  digitalWrite(in4, HIGH);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW); 
}
void forward_left()
{
  digitalWrite(in1, HIGH);
  digitalWrite(in4, LOW);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW); 
}
void backward_left()
{
  digitalWrite(in1, LOW);
  digitalWrite(in2, HIGH);
  digitalWrite(in3, LOW);
  digitalWrite(in4, LOW); 
}
void right()
{
  digitalWrite(in2, HIGH);
  digitalWrite(in3, HIGH);
  digitalWrite(in1, LOW);
  digitalWrite(in4, LOW); 
  
}
void forward_right()
{
  digitalWrite(in1, LOW);
  digitalWrite(in2, LOW);
  digitalWrite(in3, HIGH);
  digitalWrite(in4, LOW); 
}
void backward_right()
{
  digitalWrite(in1, LOW);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, HIGH); 
}
void Stop()
{
  digitalWrite(in1, LOW);
  digitalWrite(in2, LOW);
  digitalWrite(in3, LOW);
  digitalWrite(in4, LOW); 
}
void speed(){
if(data == '0') {
SPEED = 0;
}
else if(data == '1') {
SPEED = 23;
}
else if(data == '2') {
SPEED = 46;
}
else if(data == '3') {
SPEED = 69;
}
else if(data == '4') {
SPEED = 92;
}
else if(data == '5') {
SPEED = 115;
}
else if(data == '6') {
SPEED = 139;
}
else if(data == '7') {
SPEED = 162;
}
else if(data == '8') {
SPEED = 185;
}
else if(data == '9') {
SPEED = 208;
}
else if(data == '10') {
SPEED = 231;
}
else if(data == 'q') {
SPEED = 255;
}
}
float ultrasonicm(){
  digitalWrite(mtrig,LOW);          // Trig pin High
  digitalWrite(mecho,HIGH);          // Trig pin High
  digitalWrite(mtrig,HIGH);          // Trig pin High
  delayMicroseconds(10);             // wait for 10us
  digitalWrite(mtrig, LOW);          // off the trig pin

  float time_taken = pulseIn(mecho, HIGH);  // time taken to recieve waves
  float inches = time_taken/148;            // general formula

  return inches;
}